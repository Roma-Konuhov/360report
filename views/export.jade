doctype html
html
  head
    meta(charset='utf-8')
    link(rel='stylesheet', href='vendor/bootstrap/dist/css/bootstrap.css')
    link(rel='stylesheet', href='vendor/highcharts/css/highcharts.css')
    link(rel='stylesheet', href='css/main.css')
    style.
      h1, h2 {
        text-align: center;
      }
      #navbar, .navbar {
        display: none !important;
      }
      .export-panel {
        display: none;
      }
      .container {
        width: 1250px !important;
        padding: 40px;
      }
      .highcharts-point.highcharts-color-0:not(:first-child) {
        fill: #888;
        stroke: #888;
      }
      .highcharts-point.highcharts-color-0:first-child {
        fill: #ddd;
        stroke: #ddd;
      }
      .chart-block:before {
        top: 120px;
        height: 332px;
      }
      .highcharts-axis-labels.highcharts-xaxis-labels,
      .highcharts-axis-labels.highcharts-yaxis-labels {
        font-size: 14px;
        font-family: 'Trebuchet MS';
      }
      .highcharts-container .avg_norm {
        stroke-width: 10px;
        stroke: #00b0f0;
      }
      .highcharts-container .avg_score {
        stroke-width: 10px;
        stroke: #000;
      }
      .personal-statistics .data-table td.avg_norm {
        color: #00b0f0 !important;
      }
      .personal-statistics .data-table td.self_gap.positive,
      .personal-statistics .data-table td.avg_gap.positive {
        color: #1ab230 !important;
      }
      .personal-statistics .data-table td.self_gap.negative,
      .personal-statistics .data-table td.avg_gap.negative {
        color: #f00 !important;
      }

      .statistics .data-table th,
      .statistics .data-table td {
          text-align: center;
      }
      .statistics .data-table th {
          background: #000 !important;
          color: #ddd !important;
      }
      .statistics .data-table th:first-child,
      .statistics .data-table td:first-child {
          text-align: left !important;
      }
      .statistics .data-table thead tr,
      .statistics .data-table tbody tr {
          font-weight: bold !important;
          border-top: 3px solid #000 !important;
          border-bottom: 3px solid #000 !important;
      }
      .statistics .data-table tbody tr:nth-child(2n + 1) {
          background: #e7e7e7 !important;
      }

      #personal-dev-plan table {
        width: 100% !important;
        height: 800px !important;
        margin: 40px 0 !important;
        color: #ffffff !important;
        font-weight: bold !important;
      }
      #personal-dev-plan table td {
        padding: 5px !important;
        border: 1px solid #3c3c3c !important;
      }

      #personal-dev-plan table thead td {
        color: #ffffff !important;
        height: 15px !important;
        text-align: center !important;
        background: #3c3c3c !important;
      }
      #personal-dev-plan table thead td:first-child {
        background: #CCCCCC !important;
      }
      #personal-dev-plan table tbody td:first-child {
        background: #3c3c3c !important;
        width: 160px !important;
      }
      #personal-dev-plan table tbody td:first-child span {
        color: #ffffff !important;
        text-align: center !important;
        vertical-align: middle !important;
        height: 250px !important;
        writing-mode: vertical-lr !important;
        text-orientation: upright !important;
        position: relative !important;
        left: 12px !important;
      }

      #personal-dev-plan table .subtable {
        height: 250px !important;
        color: #333 !important;
        margin: 0 !important;
        font-weight: normal !important;
      }
      #personal-dev-plan table .subtable thead td,
      #personal-dev-plan table .subtable tbody td {
        vertical-align: top !important;
        background: none !important;
        border: 0 !important;
      }
body
    #app!= html

    script(src='vendor/jquery/dist/jquery.min.js')
    script(src='vendor/bootstrap/dist/js/bootstrap.min.js')
    script(src='vendor/bootstrap-filestyle/src/bootstrap-filestyle.min.js')
    script(src='vendor/highcharts/js/highcharts.js')
    script(src='vendor/lodash/dist/lodash.min.js')
    script.
      window.INITIAL_STATE = !{JSON.stringify(initialState)}

      $(function () {
        for (var i = 0; i < window.INITIAL_STATE.report.answers.length; i++) {
          Highcharts.chart('question-' + i, {
            credits: {
              enabled: false
            },
            chart: {
              type: 'bar',
              animation: false,
              borderWidth: 0,
              showAxes: true,
              marginLeft: 150,
              marginRight: 50,
              marginBottom: 30,
              spacingBottom: 0,
              spacingLeft: 0,
              spacingRight: 0,
              spacingTop: 0,
              _style: {
                fontFamily: 'Trebuchet MS',
                fontSize: '14px'
              },
            },
            title: {
              text: '',
              style: {"font-family": "Trebuchet MS", "font-size": "20px", "font-weight": "bold"},
              align: 'left',
              verticalAlign: 'middle'
            },
            plotOptions: {
              series: {
                animation: false,
                dataLabels: {
                  enabled: true,
                  align: 'center',
                  allowOverlap: true,
                  inside: true,
                  color: '#ffffff',
                  verticalAlign: 'middle',
                  style: {fontSize: "18px", "text-shadow": "none"},
                }
              }
            },
            legend: {
              enabled: false
            },
            xAxis: {
              min: 0,
              max: window.INITIAL_STATE.report.answers[i].relationLabels.length - 1,
              title: null,
              tickInterval: 1,
              categories: getXCategories(window.INITIAL_STATE.report.answers[i].relationLabels, window.INITIAL_STATE.report.answers[i].respondersNumber),
              labels: {
                style: {
                  fontSize: '14px'
                }
              }
            },
            yAxis: {
              min: 0,
              max: window.INITIAL_STATE.report.answers[i].answerLabels.length - 1,
              tickInterval: 1,
              title: null,
              opposite: true,
              labels: {
                style: {
                  fontSize: '14px'
                },
                formatter: function() {
                  return this.value && window.INITIAL_STATE.report.answers[i].answerLabels[this.value] + '<br>(' + this.value + ')' || '';
                }
              },
              plotLines: [{
                className: 'avg_score',
                color: '#000',
                value: window.INITIAL_STATE.report.statistics[i].avg_score,
                width: 10,
                label: {
                  text: window.INITIAL_STATE.report.statistics[i].avg_score,
                  verticalAlign: 'bottom',
                  rotation: 0,
                  textAlign: 'center',
                  y: 20,
                  x: 0
                }
              }, {
                className: 'avg_norm',
                color: '#00b0f0',
                value: window.INITIAL_STATE.report.statistics[i].avg_norm,
                width: 10,
                label: {
                  text: window.INITIAL_STATE.report.statistics[i].avg_norm,
                  verticalAlign: 'bottom',
                  rotation: 0,
                  textAlign: 'center',
                  y: 20,
                  x: 0
                }
              }]
            },
            series: [{
              data: _.map(window.INITIAL_STATE.report.answers[i].avgAnswers, function(value, idx) {
                return {
                  dataLabels: {
                    className: 'data_label',
                    enabled: !!value,
                    color: idx > 0 ? '#ffffff' : '#000000',
                  },
                  className: 'data_series',
                  color: idx > 0 ? '#888888' : '#dddddd',
                  y: value
                }
              }),
              fillColor: '#dddddd',
            }]
          });
        }
        function getXCategories(relationLabels, respondersNumber) {
          return _.map(relationLabels, function(label, idx) {
            return label + '(' + respondersNumber[idx] + ')';
          });
        }
      });

    block content